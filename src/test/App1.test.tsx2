import React from "react";
import { http, HttpResponse, delay } from "msw";
import { setupServer } from "msw/node";
import { TextEncoder, TextDecoder } from "util";
import fetch, { Response, Headers, Request } from "node-fetch";
import 'isomorphic-fetch';

Object.assign(global, { TextDecoder, TextEncoder, fetch, Response, Headers, Request });

import { RequestHandler } from "msw";
import { renderWithProviders } from "./mockStore";
import App from "../components/App";

export const handlers: RequestHandler[] = [
  http.get("/api/user", async () => {
    await delay(150);
    return HttpResponse.json("John Smith");
  }),
];

const server = setupServer(...handlers);

// Enable API mocking before tests.
beforeAll(() => server.listen());

// Reset any runtime request handlers we may add during the tests.
afterEach(() => server.resetHandlers());

// Disable API mocking after the tests are done.
afterAll(() => server.close());

test("fetches & receives a user after clicking the fetch user button", async () => {
  renderWithProviders(<App />);

  // should show no user initially, and not be fetching a user
  // expect(screen.getByText(/no user/i)).toBeInTheDocument();
  // expect(screen.queryByText(/Fetching user\.\.\./i)).not.toBeInTheDocument();

  // after clicking the 'Fetch user' button, it should now show that it is fetching the user
  // fireEvent.click(screen.getByRole("button", { name: /Fetch user/i }));
  // expect(screen.getByText(/no user/i)).toBeInTheDocument();
});
